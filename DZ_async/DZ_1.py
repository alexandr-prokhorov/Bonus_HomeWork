# Описание задачи:
# Напишите программу, которая имитирует работу почтового сервиса. Сервис должен
# асинхронно отправлять письма разным пользователям с разными задержками.
# Указания:
# 1. Создайте функцию send_email(recipient, delay), которая принимает имя
# получателя (recipient) и задержку (delay) в секундах.
# o Функция должна:
# ▪ выводить сообщение о начале отправки письма;
# ▪ использовать await asyncio.sleep(delay) для имитации времени
# отправки;
# ▪ выводить сообщение о завершении отправки письма.
# 2. В основной функции программы
# o Создайте список пользователей и задержек отправки, например:
# users = [("Alice", 2), ("Bob", 3), ("Charlie", 1), ("Diana", 4)].
# o Для каждого пользователя создайте асинхронную задачу с
# помощью asyncio.create_task.
# o Ожидайте завершения всех задач.
# o Используйте asyncio.run() для запуска программы.
# Ожидаемый результат:
# Программа должна конкурентно отправлять письма, и сообщения о начале и
# завершении отправки будут появляться в случайном порядке, соответствующем
# задержкам.
# Пример вывода программы:
# Начинаю отправку письма для Alice...
# Начинаю отправку письма для Bob...
# Начинаю отправку письма для Charlie...
# Начинаю отправку письма для Diana...
# Письмо для Charlie отправлено!
# Письмо для Alice отправлено!
# Письмо для Bob отправлено!
# Письмо для Diana отправлено!

import asyncio

recipients = [
    ("Alice", 2),
    ("Bob", 3),
    ("Charlie", 1),
    ("Diana", 4)
]


async def send_email(recipient, delay):
    print(f'Начинаю отправку письма для {recipient}...')
    await asyncio.sleep(delay)
    print(f'Письмо для {recipient} отправлено!')


async def main():
    tasks = []

    for recipient, delay in recipients:
        task = asyncio.create_task(send_email(recipient, delay))
        tasks.append(task)

    for task in tasks:
        await task


asyncio.run(main())
